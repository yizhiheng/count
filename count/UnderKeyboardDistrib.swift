//
// An iOS libary for moving content from under the keyboard.
//
// https://github.com/exchangegroup/UnderKeyboard
//
// This file was automatically generated by combining multiple Swift source files.
//


// ----------------------------
//
// UnderKeyboardLayoutConstraint.swift
//
// ----------------------------

import UIKit


/**

Adjusts the length (constant value) of the bottom layout constraint when keyboard shows and hides.

*/
@objc public class UnderKeyboardLayoutConstraint: NSObject {
    private weak var bottomLayoutConstraint: NSLayoutConstraint?
    private weak var bottomLayoutGuide: UILayoutSupport?
    private var keyboardObserver = UnderKeyboardObserver()
    private var initialConstraintConstant: CGFloat = 0
    private var minMargin: CGFloat = 10
    
    private var viewToAnimate: UIView?
    
    public override init() {
        super.init()
        
        keyboardObserver.willAnimateKeyboard = keyboardWillAnimate
        keyboardObserver.animateKeyboard = animateKeyboard
        keyboardObserver.start()
    }
    
    deinit {
        stop()
    }
    
    /// Stop listening for keyboard notifications.
    public func stop() {
        keyboardObserver.stop()
    }
    
    /**
    
    Supply a bottom Auto Layout constraint. Its constant value will be adjusted by the height of the keyboard when it appears and hides.
    
    - parameter bottomLayoutConstraint: Supply a bottom layout constraint. Its constant value will be adjusted when keyboard is shown and hidden.
    
    - parameter view: Supply a view that will be used to animate the constraint. It is usually the superview containing the view with the constraint.
    
    - parameter minMargin: Specify the minimum margin between the keyboard and the bottom of the view the constraint is attached to. Default: 10.
    
    - parameter bottomLayoutGuide: Supply an optional bottom layout guide (like a tab bar) that will be taken into account during height calculations.
    
    */
    public func setup(bottomLayoutConstraint: NSLayoutConstraint,
        view: UIView, minMargin: CGFloat = 10,
        bottomLayoutGuide: UILayoutSupport? = nil) {
            
            initialConstraintConstant = bottomLayoutConstraint.constant
            self.bottomLayoutConstraint = bottomLayoutConstraint
            self.minMargin = minMargin
            self.bottomLayoutGuide = bottomLayoutGuide
            self.viewToAnimate = view
            
            // Keyboard is already open when setup is called
            if let currentKeyboardHeight = keyboardObserver.currentKeyboardHeight
                where currentKeyboardHeight > 0 {
                    
                    keyboardWillAnimate(currentKeyboardHeight)
            }
    }
    
    func keyboardWillAnimate(height: CGFloat) {
        if let bottomLayoutConstraint = self.bottomLayoutConstraint {
        
        } else {
            return
        }
        
        let layoutGuideHeight = bottomLayoutGuide?.length ?? 0
        let correctedHeight = height - layoutGuideHeight
        
        if height > 0 {
            let newConstantValue = correctedHeight + minMargin
            
            if newConstantValue > initialConstraintConstant {
                // Keyboard height is bigger than the initial constraint length.
                // Increase constraint length.
                bottomLayoutConstraint!.constant = newConstantValue
            } else {
                // Keyboard height is NOT bigger than the initial constraint length.
                // Show the initial constraint length.
                bottomLayoutConstraint!.constant = initialConstraintConstant
            }
            
        } else {
            bottomLayoutConstraint!.constant = initialConstraintConstant
        }
    }
    
    func animateKeyboard(height: CGFloat) {
        viewToAnimate?.layoutIfNeeded()
    }
}


// ----------------------------
//
// UnderKeyboardObserver.swift
//
// ----------------------------

import UIKit

/**

Detects appearance of software keyboard and calls the supplied closures that can be used for changing the layout and moving view from under the keyboard.

*/
public final class UnderKeyboardObserver: NSObject {
    public typealias AnimationCallback = (height: CGFloat) -> ()
    
    let notificationCenter: NSNotificationCenter
    
    /// Function that will be called before the keyboard is shown and before animation is started.
    public var willAnimateKeyboard: AnimationCallback?
    
    /// Function that will be called inside the animation block. This can be used to call `layoutIfNeeded` on the view.
    public var animateKeyboard: AnimationCallback?
    
    /// Current height of the keyboard. Has value `nil` if unknown.
    public var currentKeyboardHeight: CGFloat?
    
    public override init() {
        notificationCenter = NSNotificationCenter.defaultCenter()
        super.init()
    }
    
    deinit {
        stop()
    }
    
    /// Start listening for keyboard notifications.
    public func start() {
        stop()
        
        notificationCenter.addObserver(self, selector: Selector("keyboardNotification:"), name:UIKeyboardWillShowNotification, object: nil);
        notificationCenter.addObserver(self, selector: Selector("keyboardNotification:"), name:UIKeyboardWillHideNotification, object: nil);
    }
    
    /// Stop listening for keyboard notifications.
    public func stop() {
        notificationCenter.removeObserver(self)
    }
    
    // MARK: - Notification
    
    func keyboardNotification(notification: NSNotification) {
        let isShowing = notification.name == UIKeyboardWillShowNotification
        
        if let userInfo = notification.userInfo,
            let height = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue().height,
            let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue,
            let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber {
                
                let correctedHeight = isShowing ? height : 0
                willAnimateKeyboard?(height: correctedHeight)
                
                UIView.animateWithDuration(duration,
                    delay: NSTimeInterval(0),
                    options: UIViewAnimationOptions(rawValue: animationCurveRawNSN.unsignedLongValue),
                    animations: { [weak self] in
                        self?.animateKeyboard?(height: correctedHeight)
                    },
                    completion: nil
                )
                
                currentKeyboardHeight = correctedHeight
        }
    }
}


